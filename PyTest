
Для Windows установка PyTest:

> selenium_env\Scripts\activate.bat
(selenium_env) С:\Users\user\environments>  pip install pytest==5.1.1


Для Linux и macOS:

​​​​​​​$ source selenium_env/bin/activate
(selenium_env) $ pip install pytest==5.1.1
========================================================================================================================
PyTest: правила запуска тестов
Когда мы выполняем команду pytest, тест-раннер собирает все тесты для запуска по определенным правилам:
- если мы не передали никакого аргумента в команду, а написали просто pytest, тест-раннер начнёт поиск в
текущей директории
- как аргумент можно передать файл, путь к директории или любую комбинацию директорий и файлов, например:
pytest scripts/selenium_scripts
# найти все тесты в директории scripts/selenium_scripts
pytest test_user_interface.py
# найти и выполнить все тесты в файле
pytest scripts/drafts.py::test_register_new_user_parametrized
# найти тест с именем test_register_new_user_parametrized в указанном файле в указанной директории и выполнить

- дальше происходит рекурсивный поиск: то есть PyTest обойдет все вложенные директории

- во всех директориях PyTest ищет файлы, которые удовлетворяют правилу  test_*.py
или *_test.py (то есть начинаются на test_ или заканчиваются _test и имеют расширение .py)

- внутри всех этих файлов находит тестовые функции по следующему правилу:
   - все тесты, название которых начинается с test, которые находятся вне классов
   - все тесты, название которых начинается с test внутри классов, имя которых начинается с Test
    (и без метода __init__ внутри класса)

-----------------------------------------------------------------------------------------------------------------------
Другие полезные команды для манипуляции выводом тестов PyTest
https://gist.github.com/amatellanes/12136508b816469678c2
-----------------------------------------------------------------------------------------------------------------------
Если нужно проверить, что тест вызывает ожидаемое исключение (довольно редкая ситуация для UI-тестов, и вам
этот способ, скорее всего, никогда не пригодится), мы можем использовать специальную конструкцию with pytest.raises().
Например, можно проверить, что на странице сайта не должен отображаться какой-то элемент:

import pytest

from selenium import webdriver
from selenium.common.exceptions import NoSuchElementException


def test_exception1():
    try:
        browser = webdriver.Chrome()
        browser.get("http://selenium1py.pythonanywhere.com/")
        with pytest.raises(NoSuchElementException):
            browser.find_element_by_css_selector("button.btn")
            pytest.fail("Не должно быть кнопки Отправить")
    finally:
        browser.quit()

def test_exception2():
    try:
        browser = webdriver.Chrome()
        browser.get("http://selenium1py.pythonanywhere.com/")
        with pytest.raises(NoSuchElementException):
            browser.find_element_by_css_selector("no_such_button.btn")
            pytest.fail("Не должно быть кнопки Отправить")
    finally:
        browser.quit()

В первом тесте элемент будет найден, поэтому ошибка NoSuchElementException, которую ожидает контекстный
менеджер pytest.raises, не возникнет, и тест упадёт.

test_3_3_9_pytest_raises.py:8 (test_exception1)
E   Failed: Не должно быть кнопки Отправить

Во втором тесте, как мы и ожидали, кнопка не будет найдена, и тест пройдет.
-----------------------------------------------------------------------------------------------------------------------
Как в Яндексе используют PyTest и другие фреймворки для функционального тестирования
https://habr.com/en/company/yandex/blog/242795/



-----------------------------------------------------------------------------------------------------------------------
https://github.com/JakUi/stepik-auto-tests-course/blob/master/%D0%A4%D0%B8%D0%BA%D1%81%D1%82%D1%83%D1%80%D1%8B%20%D0%B8%20%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D1%8B.txt


-----------------------------------------------------------------------------------------------------------------------
https://docs.pytest.org/en/latest/fixture.html



